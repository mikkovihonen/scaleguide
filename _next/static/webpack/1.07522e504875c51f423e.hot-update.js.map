{"version":3,"file":"static/webpack/1.07522e504875c51f423e.hot-update.js","sources":["webpack:///./components/ChordSelector.js"],"sourcesContent":["import React, { Component } from 'react';\nimport * as Key from 'tonal-key';\n\nclass ChordSelector extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            chromaticScale: \"C C# D D# E F F# G G# A A# B\".split(\" \"),\n            scales: Key.modeNames(true),\n            note: props.note,\n            mode: props.mode,\n            type: props.type\n        };  \n        this.handleNote = this.handleNote.bind(this);\n        this.handleMode = this.handleMode.bind(this);\n        this.handleType = this.handleType.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.propagateChange(this.state.note, this.state.mode, this.state.type);\n    }\n  \n    handleNote(event) {\n        this.setState({\n            note: event.target.value,\n        });\n        this.propagateChange(event.target.value, this.state.mode, this.state.type);\n    }\n    handleMode(event) {\n        this.setState({\n            mode: event.target.value,\n        });\n        this.propagateChange(this.state.note, event.target.value, this.state.type);\n    }\n    handleType(event) {\n        this.setState({\n            type: event.target.value,\n        });\n        this.propagateChange(this.state.note, this.state.mode, event.target.value);\n    }\n\n    propagateChange(note, mode, type) {\n        if(typeof this.props.onChange === \"function\") {\n            this.props.onChange(note, mode, type);\n        }\n    }\n    \n    handleSubmit(event) {\n      event.preventDefault();\n    }\n  \n    render() {\n      return (\n        <form onSubmit={this.handleSubmit} className=\"screenOnly\">\n          <label style={{\n              marginRight: \"5px\"\n          }}>\n            Key\n            <select value={this.state.note} onChange={this.handleNote}>\n                {this.state.chromaticScale.map((object, i) => <option key={object.toString()} value={object}>{object.replace(/^\\w/, c => c.toUpperCase())}</option>)}\n            </select>\n          </label>\n          <label style={{\n              marginRight: \"5px\"\n          }}>\n            Mode\n            <select value={this.state.mode} onChange={this.handleMode}>\n                {this.state.scales.map((object, i) => <option key={object.toString()} value={object}>{object.replace(/^\\w/, c => c.toUpperCase())}</option>)}\n            </select>\n          </label>\n          <label>\n            Type\n            <select value={this.state.type} onChange={this.handleType}>\n                <option value=\"triads\">Triads</option>\n                <option value=\"chords\">Chords</option>\n            </select>\n          </label>\n        </form>\n      );\n    }\n  }\n\n  export default ChordSelector;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AAAA;AACA;AAdA;AAcA;AACA;;;AACA;AACA;AACA;AADA;AAGA;AACA;;;AACA;AACA;AACA;AADA;AAGA;AACA;;;AACA;AACA;AACA;AADA;AAGA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;;AA1EA;AACA;AA4EA;;;;A","sourceRoot":""}